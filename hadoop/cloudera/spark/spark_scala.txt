//word coutn program in scala

val data  = sc.textFile("/user/cloudera/wordcountScala.txt")
val dataFlatMap = data.flatMap(x => x.split(" "))
dataFlatMap.collect().foreach(println)
val dataMap = dataFlatMap.map(x => (x , 1))
val count = dataMap.countByKey()

//Here u can save the above count(its a Map object) in a text File , since it
//does not have the saveAsTextFile, hence we do like below
//do a reduceByKey and then save in HDFS as a textFile

//u can also call reduceByKey and then save the results back to HDFS
val dataReduceByKey = dataMap.reduceByKey((acc , value) => acc + value)

dataReduceByKey.saveAsTextFile("/user/cloudera/scalaspark/wordcountoutScala")

***************Find totalRevenuePer day - new version **************************
val ordersRDD = sc.textFile("/user/cloudera/sqoop_import/orders")
val order_items = sc.textFile("/user/cloudera/sqoop_import/order_items")

ordersRDD.take(5).foreach(println)
order_items.take(5).foreach(println)

val ordersMap = ordersRDD.map(rec => (rec.split(",")(0).toInt , rec.split(",")(1)))
ordersMap.take(5).foreach(println)

val orderItemsMap = order_items.map(rec => (rec.split(",")(1).toInt , rec.split(",")(4).toDouble))
orderItemsMap.take(5).foreach(println)

val ordersJoinOrderItems = orderItemsMap.join(ordersMap)
ordersJoinOrderItems.take(5).foreach(println)

val ordersJoinOrderItemsMap = ordersJoinOrderItems.map(rec => (rec._2._2, rec._2._1))
ordersJoinOrderItemsMap.take(5).foreach(println)
ordersJoinOrderItemsMap.sortByKey().take(10).foreach(println)

//now find the total Revenue per day using reduceByKey

val totalRevenuePerDay = ordersJoinOrderItemsMap.reduceByKey((x,y) => x+y)
totalRevenuePerDay.count // this will give u 364 , since this is one years data


totalRevenuePerDay.take(20).foreach(println)
totalRevenuePerDay.saveAsTextFile("/user/cloudera/scalaspark/totalRevenuePerDayNew")

//find the maximum revenue producing day 
val maxRevenueDay = totalRevenuePerDay.reduce((x,y) => {if (x._2 > y._2) x else y})
//above will give u a tuple , just have to copy the result and save it in
//HDFS

maxRevenueDay.saveAsTextFile("/user/cloudera/scalaspark/mxRevenueDay")


//u can find the total revenue using groupBykey also like this
val ordersJoinOrderItemsMapGBK = ordersJoinOrderItemsMap.groupByKey()

//above gives an RDD of tuples , where the tuple has order date and List of prices
//so do the sum on the List to get the total revenue on that day

val revPerDayUsingGBK = ordersJoinOrderItemsMapGBK.map(rec => (rec._1 , rec._2.sum))
//and now count on this totalRevenuePerDay will fetch u 364 too
revPerDayUsingGBK.count

revPerDayUsingGBK.saveAsTextFile("/user/cloudera/scalaspark/revPerDayUsingGBK")
//revenue can be achieved by above groubByKey also

//same totalRevenue Per day can be achieved by aggregateByKey also
//also this is not a typical scenario for aggregateByKey , we use this
//api where the combiner logic and the reducer logic are different

val revPerDayUsingAgg = ordersJoinOrderItemsMap.aggregateByKey(0.0)((intAcc,intVal) => intAcc + intVal , (finalAcc , finalVal) => finalAcc + finalVal)

revPerDayUsingAgg.saveAsTextFile("/user/cloudera/scalaspark/revPerDayUsingAgg")

**********************Using reduceByKey ****************************
//find out TotalRevenue Per Day  and total Orders per day
// and then find out Average revenue Per day 


val ordersRDD = sc.textFile("/user/cloudera/sqoop_import/orders")
val ordersItemsRDD = sc.textFile("/user/cloudera/sqoop_import/order_items")

val ordersMap = ordersRDD.map(rec => (rec.split(",")(0) , rec))
val orderItemsMap = orderItemsRDD.(rec => (rec.split(",")(1) , rec))

val ordersJoinOrderItems = orderItemsMap.join(ordersMap)

val revenuePerOrderPerDay = ordersJoinOrderItems.map(rec => (rec._2._2.split(",")(1), rec._2._1.split(",")(4).toFloat));
val revenuePerDay = revenuePerOrderPerDay.reduceByKey((x , y) => x + y)

revenuePerDay.sortByKey().collect().foreach(println)

val ordersPerDay = ordersJoinOrderItems.map(rec => rec._2._2.split(",")(1) + "," + rec._1).distinct();

ordersPerDay.take(20).foreach(println);
val ordersPerDayParsedRDD = ordersPerDay.map(rec => (rec.split(",")(0) , 1));
val totalOrdersPerDay = ordersPerDayParsedRDD.reduceByKey((x,y) => x + y)
totalOrdersPerDay.sortByKey().collect().foreach(println)


//now do the average revenue per Day , from the Total Revenue Per day and Total orders per day
//both map have the same key , so create a new join from those maps,
//to find out average revenue per day
val finalJoinRDD = totalOrdersPerDay.join(revenuePerDay)

finalJoinRDD.collect().foreach(println)

val avgRevPerDay = finalJoinRDD.map(rec => (rec._1 , rec._2._2 /rec._2._1))

*************Using aggregateByKey **************************

//Total revenue Perday and total orders per day and then
//the average Revenue Per day is calculated using reduceByKey
//and aggregatebyKey functions

val ordersRDD = sc.textFile("/user/cloudera/sqoop_import/orders")
val ordersItemsRDD = sc.textFile("/user/cloudera/sqoop_import/order_items")

val ordersMap = ordersRDD.map(rec => (rec.split(",")(0) , rec))
val orderItemsMap = orderItemsRDD.(rec => (rec.split(",")(1) , rec))

val ordersJoinOrderItems = orderItemsMap.join(ordersMap)

val ordersJoinOrderItemsMap = ordersJoinOrderItems.map(rec => ((rec._2._2.split(",")(1) , rec._1 ) , rec._2._1.split(",")(4).toFloat));

val revenuePerOrderPerDay = ordersJoinOrderItemsMap.reduceByKey((acc , value) => acc + value)

//now discard the order# and just fetch order date and revenue 
val revenuePerOrderPerDayMap = revenuePerOrderPerDay.map(rec => (rec._1._1 , rec._2))

val revenuePerDayWithOrders= revenuePerOrderPerDayMap.aggregateByKey((0.0 , 0)) (                                          (acc , value) => (acc._1 + value , acc._2 + 1) , 
(x,y) => (x._1 + y._1 , x._2 + y._2) )

revenuePerDayWithOrders.take(100).foreach(println)

val avgRevPerDay = revenuePerDayWithOrders.map(z =>  (z._1, z._2._1/z._2._2))

*************************combineByKey *******************

//need to find a use case for combineBykey and add code here

*************************Toprevenue producing customer*************

val orders = sc.textFile("/user/cloudera/sqoop_import/orders")
val ordersMap = orders.map(rec => (rec.split(",")(0) , rec))

val orderItems = sc.textFile("/user/cloudera/sqoop_import/order_items")
val orderItemsMap = orderItems.map(rec => (rec.split(",")(1) , rec))
val ordersJoinOrderItems = orderItemsMap.join(ordersMap)

//orderes Per day per customer from above join
val ordersPerDayPerCustomer = ordersJoinOrderItems.map(t => ((t._2._2.split(",")(1) , t._2._2.split(",")(2)) , t._2._1.split(",")(4).toFloat) )

//get revenuePerCustomer by reduceByKey
val revenuePerDayPerCustomer = ordersPerDayPerCustomer.reduceByKey((acc , value) => acc + value)

//redo revenuePerDayPerCustomer with date as Key , tuple (customer_id , order_total) as value
val revenuePerDayPerCustomerMap = revenuePerDayPerCustomer.map(t => (t._1._1 , (t._1._2 ,t._2)))

revenuePerDayPerCustomerMap.sortByKey().take(200).foreach(println)

//reduceByKey to see which customer produced highest revenue on a specific day
//result would be 'Date' as Key , tuple (customer_id , order_item_subtotal) 
val topCustomerPerDayByRevenue = revenuePerDayPerCustomerMap.reduceByKey((x, y) => if (x._2 >= y._2) x else y)

//above if condn can be done in a pre-defined scala function

def findMax(x:(String,Float) , y:(String,Float)) :(String , Float) = { if (x._2 >= y._2) return x else return y }
val topCustomerPerDayByRevenue = revenuePerDayPerCustomerMap.reduceByKey((x, y) => findMax(x,y))

topCustomerPerDayByRevenue.sortByKey().take(100).foreach(println)

//below fetches result 364 days - close to a year
topCustomerPerDayByRevenue.count() 

****do the same with the HiveContext and Sql*******************

/*******find out order that created maximum revenue from the order_items table**********
// order_items and orders table needs sqoop imported into HDFS before executing
//below scala commands

val ordersItemsRDD = sc.textFile("/user/cloudera/sqoop_import/order_items")

//orderItemsMap will have order_id from order_items table and the order_subtotal for that item
val orderItemsMap = ordersItemsRDD.map(rec => (rec.split(",")(1).toInt , rec.split(",")(4).toFloat))
//now get revenue per order , reduceByKey will do that
val revenuePerOrder = orderItemsMap.reduceByKey((acc,value) => acc +value)
revenuePerOrder.reduce((acc,value) => (if (acc._2 >= value._2) acc else value))

*****find the high priced product from products table ******/

val productsRDD = sc.textFile("/user/cloudera/sqoop_import/products")
val productPriceMap = productsRDD.map(rec => rec.split(",")(4))
//there is a data fix here , need to get the HDFS files for products into ur local
//and delete record with product_id 685 

hadoop fs -get /user/cloudera/sqoop_import/products
#Delete the record with product_id 685
hadoop fs -put -f products/part* /user/cloudera/sqoop_import/products

val highPrcProduct = productPriceMap.reduce((p1 ,p2) => (if (p1.toFloat >= p2.toFloat) p1 else p2))


/******find and sort products per category id and order by the highest price *****/

val productsIdMap = products.map(rec => (rec.split(",")(0) , rec))

productsIdMap.lookup("208")
//above lookup with product id as the key renders this result
//res33: Seq[String] = WrappedArray(208,10,SOLE E35 Elliptical,,1999.99,http://images.acmesports.sports/SOLE+E35+Elliptical)
//But productsGroupBy map , does not render this record as the first record after the sort By and groubBy on these maps

val products = sc.textFile("/user/cloudera/sqoop_import/products")
val productsMap = products.map(rec => (rec.split(",")(1) , rec)) // take product category id as the Key

productsMap.take(5).foreach(println)

val productsGroupBy = productsMap.groupByKey()
productsGroupBy.take(10).foreach(println)

//below flattens just the values alone
productsGroupBy.flatMapValues(x => x).take(10)foreach(println)

//flatMap , sortBy product price descending (notice the -k will sort by desc) and take 25 top records
productsGroupBy.flatMap(rec => (rec._2.toList.sortBy(k => -k.split(",")(4).toFloat))).take(25)foreach(println)
//above scala command renders below as the first few lines of the 25 records from the groupByRDD
//66,4,SOLE F85 Treadmill,,1799.99,http://images.acmesports.sports/SOLE+F85+Treadmill
//60,4,SOLE E25 Elliptical,,999.99,http://images.acmesports.sports/SOLE+E25+Elliptical
//71,4,Diamondback Adult Response XE Mountain Bike //2,,349.98,http://images.acmesports.sports/Diamondback+Adult+Response+XE+Mountain+Bike+2014
//68,4,Diamondback Adult Outlook Mountain Bike //2014,,309.99,http://images.acmesports.sports/Diamondback+Adult+Outlook+Mountain+Bike+2014
//***Developer comment - record with id product_id 208 is not part of the output from above 


******Filter data using spark*********** Find out all cancelled orders that has order total more than 1000 dollars*******


val orders = sc.textFile("/user/cloudera/sqoop_import/orders")
val order_items = sc.textFile("/user/cloudera/sqoop_import/order_items")

val ordersFiltered = orders.filter(rec => rec.split(",")(3).equals("CANCELED"))

val ordersCancelRDD = ordersFiltered.map(rec => (rec.split(",")(0).toInt , rec))


val order_itemsRDD = order_items.map(rec => (rec.split(",")(1).toInt , rec.split(",")(4).toDouble))

val perOrderTotal = order_itemsRDD.reduceByKey((x,y) => x + y)

val canceledOrdersJoinOrderItems = ordersCancelRDD.join(perOrderTotal)
val canceledOrdersJoinOrderItemsMap = canceledOrdersJoinOrderItems.map(rec => (rec._1 ,rec._2._2))

val ordersCanceled1000 = canceledOrdersJoinOrderItemsMap.filter(rec => (rec._2 > 1000)).sortByKey(false)




