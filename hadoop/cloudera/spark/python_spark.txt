
//mostly derived my version from Durga Gadiraju hadoop videos and cloudra hadoop getting started tutorial
//Problem statement - Get Per order Total, Total Order Revenue per day and Total number of orders per day
//and calculate average revenue per day
//Orders Map - first element is the order id - notice the key is converted to integer
ordersRDD = sc.textFile("/user/cloudera/sqoop_import/orders")
ordersMap = ordersRDD.map(lambda rec: (int(rec.split(",")[0]) , rec))

//orderItemsMap - 2nd element is the order_id 
orderItemsRDD = sc.textFile("/user/cloudera/sqoop_import/order_items")
orderItemsMap = orderItemsRDD.map(lambda rec: (int(rec.split(",")[1]) , rec))
//since we r joining above 2 maps , both keys needs to the same , order_id's and
//should be of same datatypes
//join orders data onto orderitems data - always join smaller table onto a bigger table
//while joining the data
orderItemsjoinOrders = orderItemsMap.join(ordersMap)

//get the string 'order#,orderDate' from orderItems join for the key and order_item_subtota
//for the value, so we can add those values in next step to get the perOrderTotal
revenuePerOrderPerdate = orderItemsjoinOrders.map(lambda t: (str(t[0]) + "," + \
t[1][1].split(",")[1] , float(t[1][0].split(",")[4]))

//revenuePerOrderPerdate has the map of order#/orderdate , order_item_subtotal
//every individual order total , by adding all order item subtotal for an order
perOrderTotal = revenuePerOrderPerdate.reduceByKey(lambda total1 ,total2: total1 + total2)
for i in perOrderTotal.take(50):
 print(i)
 


//get the first element/key from the join , and then the 2nd element in the tuple (which again is a tuple rec[1])
//rec[1][1] needs split to give us the date - 2nd element after the split
ordersPerday = orderItemsjoinOrders.map(lambda rec: (str(rec[0]) + "," + rec[1][1].split(",")[1])).distinct()

//retrieve order # and order date from orderItemsJoinOrders and get the distinct 
//since each order/date combo can be in there for all the order items in a order
ordersPerday = orderItemsjoinOrders.map(lambda rec: (str(rec[0]) + "," + rec[1][1].split(",")[1])).distinct()

//since the order/date compound Key is distinct , just get the date from
//ordersPerday RDD and add a value 1 for each date entry
ordersPerdayCount = ordersPerday.map(lambda rec:  (rec.split(",")[1] , 1))

//the dates of the year will have a entry 1 for each order on a specific day,
//so sum up all the 1's to get no of orders on a day
//this yields us no of orders per day in the dataset
ordersPerdaySummedup = ordersPerdayCount.reduceByKey(lambda x,y: x+y)

ordersPerdaySummedup.count()
>>above yields result 364 - close to all days in a year


//Perdayrevenue
revenueAllOrdersPerdate = orderItemsjoinOrders.map(lambda t: (t[1][1].split(",")[1] , float(t[1][0].split(",")[4])))
//do the for loop for all of the RDD's that u create here to cross check
//cross verify
for rec in revenueAllOrdersPerdate:
 print(rec)
 
revenuePerday = revenueAllOrdersPerdate.reduceByKey(lambda t1,t2: t1 + t2)
(crosscheck in source database - select sum(order_item_subtotal) , order_date from orders o , order_items oi where o.order_id = oi.order_item_order_id group by order_date;)

//u can again join ordersPerday and Revenue Per day , to get to avgRevenuePerday !!!
//this RDD will save , date as key and the tuple(ordersPerday , RevenuePerday) as value
finalJoinRDD = ordersPerdaySummedup.join(revenuePerday)

//now arrive at avgRevenuePer day from above
avgRevenuePerDay = finalJoinRDD.map(lambda rec: (rec[0] , rec[1][1] / rec[1][0]))

//print this after sortByKey to see it from latest date
for rec in finalJoinRDD.sortByKey.collect():
 print(rec)
 

//now , there are these spark actions or transformations , that we can apply on RDD
//which will fetch the same results above just in a one step or two
//Lets see how.
///Get the total number of distinct orders from order_items
//need to get this from order_items , since only the processed ordersm must have made into order_items
orderItemsRDD = sc.textFile("/user/cloudera/sqoop_import/order_items")

orderItemsMap = orderItemsRDD.map(lambda rec: float(rec.split(",")[4]))
//Total revenue of orders from order Items
totalRevenue = orderItemsMap.reduce(lambda acc,val: acc +val)

totalOrders = orderItemsRDD.map(lambda rec: rec.split(",")[1]).distinct().count()

avgRevenue = totalRevenue/totalOrders

//find out the max priced product from products table
productsRDD = sc.textFile("/user/cloudera/sqoop_import/products")
productsMap = productsRDD.map(lambda rec: float(rec.split(",")[4]))

highPricedItem = productsMap.reduce(lambda x , y: x if(x >= y) else y)




